Part : /BASE_PART
{
	NameKey = "Parts/LaserMinigunLarge"
	IconNameKey = "Parts/LaserMinigunLargeIcon"
	ID = Gray.laser_minigun_large // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroup = "BatteryWeapons"
	DescriptionKey = "Parts/LaserMinigunLargeDesc"
	Cost = 10000
	TypeCategories = [weapon, uses_power, is_crewed]
	Size = [2, 5]
	PhysicalRect = [0, 2, 2, 3]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 10000
	InitialPenetrationResistance = 3
	PenetrationRectType = Normal
	ProhibitAbove = 2
	ReceiveableBuffs = [AmmoDamage, AmmoPen, AmmoSpeed, AmmoRange]
	AllowedDoorLocations
	[
		[-1, 4]
		[0, 5]
		[1, 5]
		[2, 4]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [36.8, 92]
	}
	Components : ^/0/Components
	{
		CrewSource
		{
			Type = CrewSource
			Crew = 2
		}

		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		FireAlternatingToggle
		{
			Type = UIToggle
			ToggleID = "fire_alternating"
			Default = 0
		}

		BatteryStorage
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 1500
		}
		BatteryConsumer
		{
			Type = AmmoConsumer
			AmmoType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 1000
			OperationalToggle = PowerToggle
			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 3.5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [0, -.5]
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 3.8]
					}
					{
						File = "floor_33.png"
						Size = [2, 3.8]
					}
					{
						File = "floor_66.png"
						Size = [2, 3.8]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [2, 3]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [2, 3]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 3]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 3]
					}
					{
						File = "walls_33.png"
						Size = [2, 3]
					}
					{
						File = "walls_66.png"
						Size = [2, 3]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [2, 3]
					}
					{
						File = "roof_33.png"
						Size = [2, 3]
					}
					{
						File = "roof_66.png"
						Size = [2, 3]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				Offset = [0, -.5]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"roof_doodads_on1.png"
							"roof_doodads_on2.png"
							"roof_doodads_on3.png"
							"roof_doodads_on4.png"
							"roof_doodads_on5.png"
							"roof_doodads_on6.png"
							"roof_doodads_on7.png"
							"roof_doodads_on8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalRoofDoodad
			{
				Layer = "roof_doodads"
				Offset = [0, -.5]
				DamageLevels
				[
					{
						File = "roof_doodads_off.png"
						Size = [2, 2]
						AnimationInterval = 0.1
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_windows_on.png"
						Size = [2, 3]
					}
					{
						File = "roof_windows_on_33.png"
						Size = [2, 3]
					}
					{
						File = "roof_windows_on_66.png"
						Size = [2, 3]
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_windows_off.png"
						Size = [2, 3]
					}
					{
						File = "roof_windows_off_33.png"
						Size = [2, 3]
					}
					{
						File = "roof_windows_off_66.png"
						Size = [2, 3]
					}
				]
			}
		}

		Turret
		{
			Type = TurretWeapon
			Location = [1, 1.3125] // Relative to upper-left corner of unrotated part.
			Rotation = -90d // Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 0 // Uses separate fire timer.
			FirePermissionToggle = FirePermissionToggle
			FiringArc = 195d
			RotateSpeed = 80d
			FireThresholdAngle = 1d
			AIFirepowerRating = 4000
			Emitter = BulletEmitterBase // Doesn't actually fire; only used for targeting.

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ShootSynchronizedComponents
		{
			Type = ToggledComponents
			Toggle = FireAlternatingToggle
			Invert = true
			Components
			{
				FireTimer
				{
					Type = Timer
					OperationalToggle = IsOperational
					Duration = .2
					AutoStart = true
					StartTrigger = Turret
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = FireTimer
					Invert = true
				}

				ShootLeftTrigger
				{
					Type = TriggerProxy
					ComponentID = Turret
				}

				ShootRightTrigger
				{
					Type = TriggerProxy
					ComponentID = Turret
				}
			}
		}

		ShootAlternatingComponents
		{
			Type = ToggledComponents
			Toggle = FireAlternatingToggle
			Components
			{
				FireTimer
				{
					Type = Timer
					OperationalToggle = IsOperational
					Duration = 0.1
					AutoStart = true
					StartTrigger = Turret
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = FireTimer
					Invert = true
				}

				ShootCycle
				{
					Type = ModeCycle
					ModeRange = [0, 1]
					IncrementTrigger = Turret
					StartingMode = 1 // First shot will switch to mode 0.
				}

				ShootLeftTrigger
				{
					Type = ModeTrigger
					Mode = ShootCycle
					TriggerInModes = [0]
				}

				ShootRightTrigger
				{
					Type = ModeTrigger
					Mode = ShootCycle
					TriggerInModes = [1]
					OperationalToggle = FireAlternatingToggle
				}
			}
		}

		FireTimerProxy
		{
			Type = ToggleProxy
			ComponentID = FireTimer
		}
		FirePermissionToggle
		{
			Type = MultiToggle
			Toggles = [FireTimerProxy, FireModeToggle]
			Mode = All
		}

		ShootLeftTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = ShootLeftTrigger
		}

		ShootRightTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = ShootRightTrigger
		}

		BulletEmitterBase // Doesn't actually fire; only used for targeting and as a base for the left and right emitters.
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger // none, but field is required
			GetTargetFrom = Turret
			Location = [1.484375, -.25]
			OperationalToggle = IsOperational
			FireDelay = .01
			Bullet = &<laser_bolt_large/laser_bolt_large.txt>
			AmmoStorage = BatteryStorage
			AmmoUsed = 2
			Spread = [-7.5d, 7.5d]
//			EvenSpread = false
			Burst = 2
			BurstDelay = .05
		}

		BulletEmitterLeft : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = ShootLeftTriggerProxy
			Location = [1.484375, -0.359375]
		}

		BulletEmitterRight : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = ShootRightTriggerProxy
			Location = [1.484375, 0.359375]
		}

		ChargeEffectLeft
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterLeft
			Trigger = ShootLeftTriggerProxy
			AnchorMediaEffects = true

			MediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "charge.wav"
					Volume = .9
					Speed = .666
				}
			]
		}

		ChargeEffectRight : ChargeEffectLeft
		{
			ChainedTo = BulletEmitterRight
			Trigger = ShootRightTriggerProxy
		}

		FireEffectLeft
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterLeft
			Trigger = BulletEmitterLeft
			AnchorMediaEffects = true

			MediaEffects
			[
				&<particles/laser_blaster_large_shoot.txt>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shoot.wav"
					Volume = .9
					SpeedVariation = .15
				}
			]
		}

		FireEffectRight : FireEffectLeft
		{
			ChainedTo = BulletEmitterRight
			Trigger = BulletEmitterRight
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [.7, 4.5]
			Rotation = 180d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.3, 4.5]
			Rotation = 180d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocation1/Location
				&../../CrewLocation2/Location
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

		TurretCollider
		{
			Type = CircleCollider
			ChainedTo = Turret
			Radius = 0.84375
			Density = .75
		}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Rotation = 90d
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "turrets"
				DamageLevels
				[
					{
						File = "turret.png"
						Size = [2, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"turret_doodads_on1.png"
							"turret_doodads_on2.png"
							"turret_doodads_on3.png"
							"turret_doodads_on4.png"
							"turret_doodads_on5.png"
							"turret_doodads_on6.png"
							"turret_doodads_on7.png"
							"turret_doodads_on8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "turret_doodads_off.png"
						Size = [2, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						// None.
					}
					{
						File = "turret_damage_33.png"
						Size = [2, 2]
					}
					{
						File = "turret_damage_66.png"
						Size = [2, 2]
					}
				]
			}
		}

		WeaponSpriteLeft
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [1, -0.359375]
			Rotation = 90d
			Layer = "weapons"
			ResetAnimationTrigger = ShootLeftTriggerProxy
			AtlasSprite
			{
				AnimationFiles
				[
					"weapon2.png"
					"weapon3.png"
					"weapon4.png"
					"weapon5.png"
					"weapon6.png"
					"weapon7.png"
					"weapon8.png"
					"weapon1.png" // Loop back to beginning and clamp there.
				]
				Size = [1, 2]
				AnimationInterval = 0.12
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}

		WeaponSpriteRight : WeaponSpriteLeft
		{
			Location = [1, 0.359375]
			ResetAnimationTrigger = ShootRightTriggerProxy
			AtlasSprite : ^/0/AtlasSprite
			{
				MirrorU = true
			}
		}

		BatterySprites
		{
			Type = AmmoSprites
			Location = [1, 3.5]
			AmmoStorage = BatteryStorage
			Layer = "doodads_high"
			AmmoLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 3]
				}
				{
					File = "batteries2.png"
					Size = [2, 3]
				}
				{
					File = "batteries3.png"
					Size = [2, 3]
				}
				{
					File = "batteries4.png"
					Size = [2, 3]
				}
				{
					File = "batteries5.png"
					Size = [2, 3]
				}
				{
					File = "batteries6.png"
					Size = [2, 3]
				}
				{
					File = "batteries7.png"
					Size = [2, 3]
				}
				{
					File = "batteries8.png"
					Size = [2, 3]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 3.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [1, 3.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 3.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					Delay = &~/Part/Components/Turret/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 6]
			Offset = [0, -.5]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxAmmo) / 1000

		RecCrew = (&CrewRequired)
	}
	StatsByCategory
	[
		{
			NameKey = "StatCategories/LaserBoltLarge"
			Stats
			{
				DamagePerShot = 800
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				Radius = 3
				ROF = 1 / (&~/Part/Components/ShootAlternatingComponents/Components/FireTimer/Duration)
				Range = 250
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				Spread = 15d
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = 160
				ShotHP = 300
			}
		}
	]
}
