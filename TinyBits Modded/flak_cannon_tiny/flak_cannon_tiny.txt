Part : /BASE_PART
{
	NameKey = "Parts/FlakCannonTiny"
	IconNameKey = "Parts/FlakCannonTinyIcon"
	ID = Gray.flak_cannon_tiny // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroups = ["AmmoWeapons"]
	DescriptionKey = "Parts/FlakCannonTinyDesc"
	Cost = 5000
	TypeCategories = [defense, uses_ammo, is_crewed]
	Size = [1, 2]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 8000
	InitialPenetrationResistance = 7.5
	PenetrationRectType = Normal
	ProhibitAbove = 1
	RecievableBuffs = [AmmoDamage, AmmoRange]
	AllowedDoorLocations
	[
		[-1, 1]
		[0, 2]
		[1, 1]
	]

	ExternalWallsByCell
	[
		{
			Key = [0, 0]
			Value = [Bottom, Right, Left]
		}
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [39.4, 92]
	}
	Components : ^/0/Components
	{
		CrewSource
		{
			Type = CrewSource
			Crew = 1
		}

		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		FirePrefToggle
		{
			Type = UIToggle
			ToggleID = "fire_pref"
			Default = 2
		}
		FirePrefAttack
		{
			Type = ModeToggle
			Mode = FirePrefToggle
			OnModes = [0, 2]
		}
		FirePrefDefend
		{
			Type = ModeToggle
			Mode = FirePrefToggle
			OnModes = [1, 2]
		}
		AttackToggle
		{
			Type = MultiToggle
			Toggles = [AutoTargetToggle, FirePrefAttack]
			Mode = All
		}
		DefendToggle
		{
			Type = MultiToggle
			Toggles = [AutoTargetToggle, FirePrefDefend]
			Mode = All
		}

		LoadedAmmo1
		{
			Type = AmmoStorage
			AmmoType = bullet
			MaxAmmo = 5
			AnticipateMoreAmmoFrom = ["AmmoStorage"]
		}
		LoadedAmmo2
		{
			Type = AmmoStorage
			AmmoType = bullet
			MaxAmmo = 5
			AnticipateMoreAmmoFrom = ["AmmoStorage"]
		}

		AmmoStorage
		{
			Type = AmmoStorage
			AmmoType = bullet
			MaxAmmo = 10
		}
		AmmoConsumer
		{
			Type = AmmoConsumer
			AmmoType = bullet
			Storage = AmmoStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			AdditionalStorageForJobPriority = [LoadedAmmo1, LoadedAmmo2]
			OperationalToggle = PowerToggle
			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/AmmoDeliver
		}

		AmmoPrereq
		{
			Type = MultiAmmoStorage
			AmmoType = bullet
			AmmoStorages = [LoadedAmmo1, LoadedAmmo2, AmmoStorage]
		}

		AmmoLoader1
		{
			Type = AmmoConverter
			FromStorage = AmmoStorage
			ToStorage = LoadedAmmo1
			FromQuantity = 1
			ToQuantity = 1
			Interval = .10
			DelayTrigger = FlakEmitter1
			DelayAfterTrigger = .25
		}
		AmmoLoader2
		{
			Type = AmmoConverter
			FromStorage = AmmoStorage
			ToStorage = LoadedAmmo2
			FromQuantity = 1
			ToQuantity = 1
			Interval = .10
			DelayTrigger = FlakEmitter2
			DelayAfterTrigger = .25
		}

		LoadEffects1
		{
			Type = TriggeredEffects
			Trigger = AmmoLoader1
			MediaEffects = &/COMMON_EFFECTS/AmmoLoad
		}
		LoadEffects2
		{
			Type = TriggeredEffects
			Trigger = AmmoLoader2
			MediaEffects = &/COMMON_EFFECTS/AmmoLoad
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, 1]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [0, -.2]
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 2.4]
					}
					{
						File = "floor_33.png"
						Size = [1, 2.4]
					}
					{
						File = "floor_66.png"
						Size = [1, 2.4]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, .1]
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 2.3]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				Offset = [0, -.2]
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 2.4]
					}
					{
						File = "walls_33.png"
						Size = [1, 2.4]
					}
					{
						File = "walls_66.png"
						Size = [1, 2.4]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				Offset = [0, -.2]
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [1, 2.4]
					}
					{
						File = "roof_33.png"
						Size = [1, 2.4]
					}
					{
						File = "roof_66.png"
						Size = [1, 2.4]
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_windows_off.png"
						Size = [1, 2.4]
					}
					{
						File = "roof_windows_off_33.png"
						Size = [1, 2.4]
					}
					{
						File = "roof_windows_off_66.png"
						Size = [1, 2.4]
					}
				]
			}
		}

		Turret
		{
			Type = TurretWeapon
			Location = [.5, .05] // Relative to upper-left corner of unrotated part.
			Rotation = -90d // Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = .35
			FiringArc = 30d
			RotateSpeed = 60d
			FireThresholdAngle = 30d
			TargetSearchesPerSecond = 8 // Default is 2.
			AIFirepowerRating = 1000
			Emitter = BaseFlakEmitter
			AllowShipWideExplicitTargetsToggle = AttackToggle
			EstimateFirepowerToggle = AttackToggle
			AlwaysShowCoverage = true
			AllowDirectControlToggle = FirePrefAttack
			FirePermissionToggle = FireModeToggle

			AutoTargets
			[
				{
					TargetType = Bullets
					BulletTargetCategories = [missile, laser, bullet, mine]
					Toggle = DefendToggle
				}
				{
					TargetType = ShipParts
					Toggle = AttackToggle
					Overridable = true
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}

		ShootCycle
		{
			Type = ModeCycle
			ModeRange = [0, 1]
			IncrementTrigger = Turret
			StartingMode = 1 // First shot will switch to mode 0.
		}
		ShootTrigger1
		{
			Type = ModeTrigger
			Mode = ShootCycle
			TriggerInModes = [0]
		}
		ShootTrigger2
		{
			Type = ModeTrigger
			Mode = ShootCycle
			TriggerInModes = [1]
		}

		BaseFlakEmitter : <flak_large/flak_large.txt>
		{
			Type = BeamEmitter
			ChainedTo = Turret
			GetTargetFrom = Turret
			FireTrigger // Not optional, but don't want to actually shoot this emitter.
			Location = [1.25, 0]
			OperationalToggle = IsOperational
			AmmoUsed = 1
			Recoil = 1
			Burst = 1
			Spread = [-1d, 1d]
		}
		FlakEmitter1 : BaseFlakEmitter
		{
			Location = [35, -.35]
			FireTrigger = ShootTrigger1
			AmmoStorage = LoadedAmmo1
		}
		FlakEmitter2 : BaseFlakEmitter
		{
			Location = [35, .35]
			FireTrigger = ShootTrigger2
			AmmoStorage = LoadedAmmo2
		}

		FireEffect1a
		{
			Type = TriggeredEffects
			ChainedTo = FlakEmitter1
			Trigger = FlakEmitter1
			Location = [-.25, 0]

			MediaEffects
			[
				&<particles/point_defense_shoot.txt>
				&<particles/flak_cannon_smoke_large.txt>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "particles/shoot.wav"
					Speed = 2
					SpeedVariation = .5
					Volume = .5
				}

				: /BASE_SHAKE
				{
					ShakeAmount = .025
					Duration = .25
				}
			]
		}
		FireEffect1b : FireEffect1a
		{
			Location = [-.25, 0]
		}
		FireEffect2a : FireEffect1a
		{
			ChainedTo = FlakEmitter2
			Trigger = FlakEmitter2
		}
		FireEffect2b : FireEffect2a
		{
			Location = [-.25, 0]
		}

		CrewLocation1
		{
			Type = CrewLocation
			ChainedTo = Turret
			Location = [-1.1, 0]
			Rotation = 270d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [AmmoPrereq]
			CrewDestinations
			[
				[.5, 1.1]
			]
			CrewLocations
			[
				CrewLocation1
			]
		}

		TurretCollider
		{
			Type = CircleCollider
			ChainedTo = Turret
			Radius = .25
			Density = 1
		}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "turrets"
				DamageLevels
				[
					{
						File = "turret.png"
						Size = [1, 2]
					}
					/*{
						File = "turret_33.png"
						Size = [1, 1]
					}
					{
						File = "turret_66.png"
						Size = [1, 1]
					}*/
				]
			}
			OperationalDoodad
			{
				Layer = "turrets" // Putting on turrets layer because they will rotate frequently.
				Offset = [0, 1]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"gun_doodads_on1.png"
							"gun_doodads_on2.png"
							"gun_doodads_on3.png"
							"gun_doodads_on4.png"
							"gun_doodads_on5.png"
							"gun_doodads_on6.png"
							"gun_doodads_on7.png"
							"gun_doodads_on8.png"
						]
						Size = [1.3, 1.3]
						AnimationInterval = 0.125
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "turrets" // Putting on turrets layer because they will rotate frequently.
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "gun_doodads_off.png"
						Size = [1.3, 1.3]
					}
				]
			}
		}

		BarrelSprite1
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [0, -.2]
			Rotation = 90d
			Layer = "weapons"
			ResetAnimationTrigger = FlakEmitter1
			AtlasSprite
			{
				AnimationFiles
				[
					"barrel2.png"
					"barrel3.png"
					"barrel4.png"
					"barrel5.png"
					"barrel6.png"
					"barrel7.png"
					"barrel8.png"
					"barrel1.png"// Loop back to beginning and clamp there.
				]
				Size = [.5, 1]
				AnimationInterval = 0.0625
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}
		BarrelSprite2 : BarrelSprite1
		{
			ChainedTo = Turret
			Location = [0, .2]
			ResetAnimationTrigger = FlakEmitter2
			AtlasSprite : ^/0/AtlasSprite
			{
				MirrorU = true
			}
		}

		LoadedAmmoSprites1
		{
			Type = AmmoSprites
			ChainedTo = Turret
			Location = [-.5, .25]
			Rotation = 90d
			AmmoStorage = LoadedAmmo1
			Layer = "turrets" // Putting on turrets layer because they will rotate frequently.
			HasZeroAmmoSprite = true
			AmmoLevels
			[
				{
					File = "loaded_bullets0.png"
					Size = [.5, 1]
				}
				{
					File = "loaded_bullets1.png"
					Size = [.5, 1]
				}
				{
					File = "loaded_bullets2.png"
					Size = [.5, 1]
				}
				{
					File = "loaded_bullets3.png"
					Size = [.5, 1]
				}
				{
					File = "loaded_bullets4.png"
					Size = [.5, 1]
				}
				{
					File = "loaded_bullets5.png"
					Size = [.5, 1]
				}
				{
					File = "loaded_bullets6.png"
					Size = [.5, 1]
				}
			]
		}
		LoadedAmmoSprites2
		{
			Type = AmmoSprites
			ChainedTo = Turret
			Location = [-.5, -.25]
			Rotation = 90d
			AmmoStorage = LoadedAmmo2
			Layer = "turrets" // Putting on turrets layer because they will rotate frequently.
			HasZeroAmmoSprite = true
			AmmoLevels
			[
				{
					File = "loaded_bullets0.png"
					Size = [.5, 1]
					MirrorU = true
				}
				{
					File = "loaded_bullets1.png"
					Size = [.5, 1]
					MirrorU = true
				}
				{
					File = "loaded_bullets2.png"
					Size = [.5, 1]
					MirrorU = true
				}
				{
					File = "loaded_bullets3.png"
					Size = [.5, 1]
					MirrorU = true
				}
				{
					File = "loaded_bullets4.png"
					Size = [.5, 1]
					MirrorU = true
				}
				{
					File = "loaded_bullets5.png"
					Size = [.5, 1]
					MirrorU = true
				}
				{
					File = "loaded_bullets6.png"
					Size = [.5, 1]
					MirrorU = true
				}
			]
		}

		AmmoSprites
		{
			Type = AmmoSprites
			Location = [.5, 1.75]
			AmmoStorage = AmmoStorage
			Layer = "doodads_low"
			AmmoLevels
			[
				{
					File = "ground_bullets1.png"
					Size = [.75, .5]
				}
				{
					File = "ground_bullets2.png"
					Size = [.75, .5]
				}
				{
					File = "ground_bullets3.png"
					Size = [.75, .5]
				}
				{
					File = "ground_bullets4.png"
					Size = [.75, .5]
				}
				{
					File = "ground_bullets5.png"
					Size = [.75, .5]
				}
				{
					File = "ground_bullets6.png"
					Size = [.75, .5]
				}
				{
					File = "ground_bullets7.png"
					Size = [.75, .5]
				}
				{
					File = "ground_bullets8.png"
					Size = [.75, .5]
				}
				{
					File = "ground_bullets9.png"
					Size = [.75, .5]
				}
				{
					File = "ground_bullets10.png"
					Size = [.75, .5]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [.5, 1]

			FactorHitEffectsWith = AmmoPrereq
			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 25000
					Radius = 4.5
					Delay = .05
					FireChancePerNDamage = 50%
					NDamage = 1000
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 5000
					Radius = 3.5
					Delay = .05
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of ammo.
				{
					Toggle = AmmoPrereq
					Delay = &~/Part/Components/Turret/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoAmmo
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 2]
			Offset = [0, -.5]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		AmmoCapacity = (&~/Part/Components/AmmoStorage/MaxAmmo) + (&~/Part/Components/LoadedAmmo1/MaxAmmo) + (&~/Part/Components/LoadedAmmo2/MaxAmmo)

		RecAmmo = &../StatsByCategory/0/Stats/AmmoPerSecond
		RecCrew = (&CrewRequired) + (&RecAmmo) * 2
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/Flak"
			Stats
			{
				DamagePerShot = &~/Part/Components/BaseFlakEmitter/HitNothing/HitEffects/0/TotalDamage/BaseValue
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				ShotDamage = &Damage
				DamageArea = &~/Part/Components/BaseFlakEmitter/HitNothing/HitEffects/0/Radius
				Salvo = [(&~/Part/Components/BaseFlakEmitter/Burst), (&~/Part/Components/Turret/FireInterval)]
				ROF = (&~/Part/Components/BaseFlakEmitter/Burst) / (&~/Part/Components/Turret/FireInterval)
				Range = &~/Part/Components/BaseFlakEmitter/Range/BaseValue
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				Spread = deg(asin((&~/Part/Components/BaseFlakEmitter/RandomOffsetRadius/1) / (&~/Part/Components/BaseFlakEmitter/Range/BaseValue)))
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = Infinity
				AmmoPerShot = (&~/Part/Components/BaseFlakEmitter/AmmoUsed) / (&~/Part/Components/BaseFlakEmitter/Burst)
				AmmoPerSecond = (&AmmoPerShot) * (&ROF)
				ShotAmmoUsage = [&../AmmoPerShot, &../AmmoPerSecond]
			}
		}
	]
}
