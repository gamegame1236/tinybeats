Part : /BASE_PART
{
	NameKey = "Parts/PointDefenseHugo"
	IconNameKey = "Parts/PointDefenseHugoIcon"
	ID = Gray.point_defense_hugo // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroups = ["BatteryWeapons"]
	DescriptionKey = "Parts/PointDefenseHugoDesc"
	Cost = 18000
	TypeCategories = [defense, uses_power]
	Size = [20, 20]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 12000
	InitialPenetrationResistance = 24
	PenetrationRectType = Normal
	ProhibitAbove = 7
	AllowedDoorLocations
	[
		[-1, 3]
		[-1, 4]
		[0, 5]
		[1, 5]
		[2, 5]
		[3, 5]
		[4, 5]
		[5, 3]
		[5, 4]
		[10, 4]
		[10, 3]
		[0, 10]
		[1, 10]
		[2, 10]
		[3, 10]
		[4, 10]
	]

	ExternalWallsByCell
	[
		{
			Key = [0, 0]
			Value = []
		}
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [44.33, 94.66]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			AvailableChoices = [-1, 1, 2]
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		FirePrefToggle
		{
			Type = UIToggle
			ToggleID = "fire_pref"
			Default = 1
		}
		FirePrefAttack
		{
			Type = ModeToggle
			Mode = FirePrefToggle
			OnModes = [0, 2]
		}
		FirePrefDefend
		{
			Type = ModeToggle
			Mode = FirePrefToggle
			OnModes = [1, 2]
		}
		AttackToggle
		{
			Type = MultiToggle
			Toggles = [AutoTargetToggle, FirePrefAttack]
			Mode = All
		}
		DefendToggle
		{
			Type = MultiToggle
			Toggles = [AutoTargetToggle, FirePrefDefend]
			Mode = All
		}

		BatteryStorage
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 2500
		}
		BatteryConsumer
		{
			Type = AmmoConsumer
			AmmoType = battery
			Storage = BatteryStorage
			ResupplyThreshold = 500
			DefaultPriority = &/PRIORITIES/Defense_Supply
			OperationalToggle = PowerToggle
			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		Graphics
		{
			Type = Graphics
			Location = [10, 10]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [20, 20]
					}
					{
						File = "floor_33.png"
						Size = [20, 20]
					}
					{
						File = "floor_66.png"
						Size = [20, 20]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				Offset = [0, -1]
				DamageLevels
				[
					{
						File = "doodads.png"
						Size = [8, 12]
					}
					{
						File = "doodads_33.png"
						Size = [8, 12]
					}
					{
						File = "doodads_66.png"
						Size = [8, 12]
					}
				]
			}
			NonOperationalDoodad = &OperationalDoodad
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [20, 20]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [20, 20]
					}
					{
						File = "walls_33.png"
						Size = [20, 20]
					}
					{
						File = "walls_66.png"
						Size = [20, 20]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [20, 20]
					}
					{
						File = "roof_33.png"
						Size = [20, 20]
					}
					{
						File = "roof_66.png"
						Size = [20, 20]
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_window.png"
						Size = [20, 20]
					}
					{
						File = "roof_window_33.png"
						Size = [20, 20]
					}
					{
						File = "roof_window_66.png"
						Size = [20, 20]
					}
				]
			}
			NonOperationalRoofWindows = &OperationalRoofWindows
		}

		Turret
		{
			Type = TurretWeapon
			Location = [10, 20]// Relative to upper-left corner of unrotated part.
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = .000000001
			FiringArc = 135d
			RotateSpeed = 90d
			FireThresholdAngle = 1d
			AIFirepowerRating = 3750
			CanBeGivenExplicitTarget = false
			Emitter = BulletEmitter
			TargetSearchesPerSecond = 8 // Default is 2.
			HoldTargetAfterCancel = .5
			TargetPathThickness = .2// &../BulletEmitter/Bullet/Components/Physics/Radius
			EstimateFirepowerToggle = AttackToggle
			AlwaysShowCoverage = true
			AllowDirectControl = true
			FirePermissionToggle = FireModeToggle

			AutoTargets
			[
				{
					TargetType = Bullets
					BulletTargetCategories = [missile, mine, bullet, laser]
					Toggle = DefendToggle
				}
				{
					TargetType = ShipParts
					Toggle = AttackToggle
					Overridable = true
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 2.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			ShowProgressFor = Turret
		}

		BulletEmitter
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [12, 0]
			OperationalToggle = IsOperational
			Bullet = &<pd_shot/pd_shot.txt>
			Spread = [-18.5d, 18.5d]
			AmmoStorage = BatteryStorage
			AmmoUsed = 10
			MinAmmoUsed = 1
			Burst = 3
			BurstDelay = .1
		}

		FireEffect
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitter
			Trigger = BulletEmitter
			AnchorMediaEffects = true

			MediaEffects
			[
				&<particles/point_defense_shoot.txt>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shoot.wav"
					Volume = .25
					SpeedVariation = .25
				}
			]
		}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "turrets"
				DamageLevels
				[
					{
						File = "turret_on.png"
						Size = [16, 28]
					}
					{
						File = "turret_on_33.png"
						Size = [16, 28]
					}
					{
						File = "turret_on_66.png"
						Size = [16, 28]
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "turrets"
				DamageLevels
				[
					{
						File = "turret_off.png"
						Size = [16, 28]
					}
					{
						File = "turret_off_33.png"
						Size = [16, 28]
					}
					{
						File = "turret_off_66.png"
						Size = [16, 28]
					}
				]
			}
		}

		BatterySprites
		{
			Type = AmmoSprites
			Location = [10, 10]
			AmmoStorage = BatteryStorage
			Layer = "doodads_low"
			AmmoLevels
			[
				{
					File = "battery1.png"
					Size = [12, 12]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [5, 5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [5, 5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [5, 5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					Delay = &~/Part/Components/Turret/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Offset = [0, -1]
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [20, 28]
		}
	}

	Stats
	{
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxAmmo) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		RecCrew = (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/PDShot"
			Stats
			{
				DamagePerShot = &~/Part/Components/BulletEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/TotalDamage
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				ShotDamagePerShot = &~/Part/Components/BulletEmitter/Bullet/Components/AntiBullet/HitBullet/HitEffects/0/Damage
				ShotDamagePerSecond = (&ShotDamagePerShot) * (&ROF)
				ShotDamage = [&../ShotDamagePerShot, &../ShotDamagePerSecond]
				ROF = 1 / (&~/Part/Components/Turret/FireInterval)
				Range = &~/Part/Components/BulletEmitter/Bullet/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				Spread = deg(&~/Part/Components/BulletEmitter/Spread/1)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = &~/Part/Components/BulletEmitter/Bullet/Speed
				PowerPerShot = (&~/Part/Components/BulletEmitter/AmmoUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&ROF)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
	]
}
