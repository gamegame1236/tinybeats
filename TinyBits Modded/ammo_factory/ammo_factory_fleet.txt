Part : /BASE_PART
{
	NameKey = "Parts/AmmoFactoryFleet"
	IconNameKey = "Parts/AmmoFactoryFleetIcon"
	ID = Battleman103333.ammo_factory_fleet // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	OtherIDs = [ammo_supply_fleet, ammo_factory_fleet]
	EditorGroup = "Parts"
	DescriptionKey = "Parts/AmmoFactoryFleetDesc"
	Cost = 100000
	Size = [3, 3]
	SelectionPriority = 1
	MaxHealth = 10000
	TypeCategories = [provides_ammo, uses_power]
	ReceivableBuffs = [Factory]
	AllowedDoorLocations
	[
		[-1, 1]
		[-1, 2]
		[0, 3]
		[1, 3]
		[2, 3]
		[3, 1]
		[3, 2]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 32]
	}
	Components : ^/0/Components
	{
		CrewSource
		{
			Type = CrewSource
			Crew = 1
		}
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		AmmoStorage
		{
			Type = AmmoStorage
			AmmoType = bullet
			MaxAmmo = 12
			SuppliesAmmo = true
			ExpectedAmmoGenerationRate = { BaseValue=(&../../AmmoConverter/ToQuantity) / (&../../AmmoConverter/Interval/BaseValue); BuffType=Factory; BuffMode=Multiply; }
			ExpectedAmmoGenerationToggle = IsOperational
		}

		BatteryStorage
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 1000
		}

		BatteryConsumer
		{
			Type = AmmoConsumer
			AmmoType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		AmmoConverter
		{
			Type = AmmoConverter
			OperationalToggle = IsOperational
			FromStorage = BatteryStorage
			ToStorage = AmmoStorage
			FromQuantity = 200
			MinFromQuantityForConversion = 1
			ToQuantity = 3
			Interval = { BaseValue=1; BuffType=Factory; BuffMode=Divide; }
		}

		ConvertEffects
		{
			Type = TriggeredEffects
			Trigger = AmmoConverter
			Location = [1.5, 1.5]
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "bullet_create.wav"
					Volume = .075
					SpeedVariation = .1
				}
			]
		}

		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = Factory
			BuffAmount = 25%
			GridDistance = 1
			OperationalToggle = IsOperational
		}

		AreaPowerProvider
		{	
			Type = TriggeredEffects
			Location = [1.5, 1.5]
			Trigger = MainTimer
			HitEffects
			[
				{
					Type = ExplosiveAmmoDrain
					AmmoType = bullet
					TotalDrain = -10
					Radius = 15
					Falloff = 0
					Delay = 0
					Filter
					{
						Ships = true
						Shields = false				
						Friendlies = true
						Enemies = false
					}
				}
			]
		}

		MainTimer
		{
			Type = Timer
			Duration = .85
			AutoStart = true
			Repeats = true
		}

		Graphics
		{
			Type = Graphics
			Location = [1.5, 1.5]
			OperationalToggle = IsOperational
			AnimationToggle = AmmoConverter
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [3, 3]
					}
					{
						File = "floor_33.png"
						Size = [3, 3]
					}
					{
						File = "floor_66.png"
						Size = [3, 3]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				Offset = [0, -.75]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
							"doodads_on9.png"
							"doodads_on10.png"
							"doodads_on11.png"
							"doodads_on12.png"
							"doodads_on13.png"
							"doodads_on14.png"
							"doodads_on15.png"
							"doodads_on16.png"
						]
						Size = [3, 1.5]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				Offset = [0, -.75]
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [3, 1.5]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [3, 3]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [3, 3]
					}
					{
						File = "walls_33.png"
						Size = [3, 3]
					}
					{
						File = "walls_66.png"
						Size = [3, 3]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [3, 3]
					}
					{
						File = "roof_33.png"
						Size = [3, 3]
					}
					{
						File = "roof_66.png"
						Size = [3, 3]
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_windows.png"
						Size = [3, 3]
					}
					{
						File = "roof_windows_33.png"
						Size = [3, 3]
					}
					{
						File = "roof_windows_66.png"
						Size = [3, 3]
					}
				]
			}
			NonOperationalRoofWindows = &OperationalRoofWindows
		}

		BatterySprites
		{
			Type = AmmoSprites
			Location = [1.5, 1.5]
			AmmoStorage = BatteryStorage
			Layer = "doodads_low"
			AmmoLevels
			[
				{
					File = "batteries1.png"
					Size = [3, 3]
				}
				{
					File = "batteries2.png"
					Size = [3, 3]
				}
			]
		}

		AmmoSprites
		{
			Type = AmmoSprites
			Location = [1.5, 1.5]
			AmmoStorage = AmmoStorage
			Layer = "doodads_low"
			AmmoLevels
			[
				{
					File = "bullets1.png"
					Size = [3, 3]
				}
				{
					File = "bullets2.png"
					Size = [3, 3]
				}
				{
					File = "bullets3.png"
					Size = [3, 3]
				}
				{
					File = "bullets4.png"
					Size = [3, 3]
				}
				{
					File = "bullets5.png"
					Size = [3, 3]
				}
				{
					File = "bullets6.png"
					Size = [3, 3]
				}
				{
					File = "bullets7.png"
					Size = [3, 3]
				}
				{
					File = "bullets8.png"
					Size = [3, 3]
				}
				{
					File = "bullets9.png"
					Size = [3, 3]
				}
				{
					File = "bullets10.png"
					Size = [3, 3]
				}
				{
					File = "bullets11.png"
					Size = [3, 3]
				}
				{
					File = "bullets12.png"
					Size = [3, 3]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1.5, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1.5, 1.5]

			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 2000
					Radius = 2
					Delay = .05
					FireChancePerNDamage = 25%
					NDamage = 1000
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 2000
					Radius = 2
					Delay = .05
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [3, 3]
		}
	}

	Stats
	{
		AmmoProduction = (&~/Part/Components/AmmoConverter/ToQuantity) / (&~/Part/Components/AmmoConverter/Interval/BaseValue)
		AmmoCapacity = &~/Part/Components/AmmoStorage/MaxAmmo
		PowerPerAmmo = (&~/Part/Components/AmmoConverter/FromQuantity) / (&~/Part/Components/AmmoConverter/ToQuantity) / 1000
		PowerPerSecond = (&~/Part/Components/AmmoConverter/FromQuantity) / (&~/Part/Components/AmmoConverter/Interval/BaseValue) / 1000
		AmmoPowerUsage = [&../PowerPerAmmo, &../PowerPerSecond]
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxAmmo) / 1000
		FactoryBuff = (&~/Part/Components/BuffProvider/BuffAmount) * 100

		RecPower = &PowerPerSecond
		RecCrew = (&RecPower) * 4
	}
}
