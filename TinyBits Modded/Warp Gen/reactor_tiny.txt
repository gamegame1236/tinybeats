Part : /BASE_PART
{
	NameKey = "Parts/QT"
	IconNameKey = "Parts/QTIcon"
	ID = Battleman103333.quantum_tunnel // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	OtherIDs = [quantum_tunnel]
	EditorGroup = "Parts"
	DescriptionKey = "Parts/QTDesc"
	Cost = 2500
	AIValue = (&Cost) * 5
	Size = [1, 1]
	SelectionPriority = 0
	MaxHealth = 2500
	AutoDoorMaxPathLength = 5
	TypeCategories = [provides_power, bounty_objective]
	CreatePartPerTileWhenDestroyed = ""
	IgnoreRotationForMirroredSelection = true
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 32]
	}
	Components : ^/0/Components
	{
		CrewSource
		{
			Type = CrewSource
			Crew = 1
		}

		AmmoStorage
		{
			Type = AmmoStorage
			AmmoType = bullet
			MaxAmmo = 12
			StartAmmo = &MaxAmmo
		}

		BatteryStorage
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 9000
			MaxAmmoPickUp = 1500
			StartingAmmo = &MaxAmmo
			SuppliesAmmo = true
			AssumeAlwaysHasAmmo = true
			WaitPerDistToNextClosest = .15
		}
		BatteryProducer
		{
			Type = AmmoConverter
			ToStorage = BatteryStorage
			ToQuantity = 1500
			Interval = .85
		}

		AmmoConverter
		{
			Type = AmmoConverter
			FromStorage = BatteryStorage
			ToStorage = AmmoStorage
			FromQuantity = 1
			MinFromQuantityForConversion = 1
			ToQuantity = 2
			Interval = { BaseValue=.85; BuffType=Factory; BuffMode=Divide; }
		}

		Graphics
		{
			Type = Graphics
			Location = [0.5, 0.5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
				]
			}

			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
					{
						File = "walls_33.png"
						Size = [1, 1]
					}
					{
						File = "walls_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [1, 1]
					}
					{
						File = "roof_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_66.png"
						Size = [1, 1]
					}
				]
			}
		}

		DestroyedEffects
		{
			Type = DeathEffects
			Location = [0.5, 0.5]

			MediaEffects
			[
				&<particles/reactor_explode.txt>
				&<particles/reactor_explode_flash.txt>
				&<particles/reactor_shockwave.txt>
				&<./Data/common_effects/particles/explosions/med_part_explode_debris.txt>
				&<./Data/common_effects/particles/explosions/big_part_explode_smoke.txt>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "destroyed.wav"
					Volume = 1
					SpeedVariation = .25
				}

				: /BASE_SHAKE
				{
					ShakeAmount = .25
					Duration = 1
				}
			]
			
			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 10000
					Radius = 2.5
					Delay = .05
					FireChancePerNDamage = 10%
					ImpulsePerNDamage = -25
					NDamage = 200
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 5000
					Radius = 2
					Delay = .05
					ImpulsePerNDamage = -12.5
					NDamage = 200
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [0.5, 0.5]
			Layer = "indicators"
			Indicators
			[
				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]
		}
	}

	Stats
	{
		PowerGeneration = (&~/Part/Components/BatteryProducer/ToQuantity) / (&~/Part/Components/BatteryProducer/Interval) / 1250
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxAmmo) / 1000
	}
}
